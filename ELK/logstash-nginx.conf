input {
  udp {
        port => 12201
        queue_size => 50000
        type => "syslog"
   }
}

filter {
  # Utilisation de grok pour supprimer le préfixe Syslog avant de traiter le message JSON
  grok {
    match => { "message" => "<%{INT}>%{SYSLOGTIMESTAMP:timestamp} %{HOSTNAME:hostname} nginx: %{GREEDYDATA:json_message}" }
  }

  # Dissect sur la partie JSON du message
  dissect {
    mapping => {
      # <190>Nov  6 13:24:08 e39cc0aa58c7 nginx: {"time_local":"06/Nov/2024:13:24:08 +0000","remote_addr":"172.19.0.1","remote_user":"","request":"GET /?toto HTTP/1.1","status":"200","body_bytes_sent":"3113","http_referer":"","http_user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36","http_x_forwarded_for":""}
      "json_message" => '{"time_local":"%{time_local}","remote_addr":"%{remote_addr}","remote_user":"%{remote_user}","request":"%{request}","status":"%{status}","body_bytes_sent":"%{body_bytes_sent}","http_referer":"%{http_referer}","http_user_agent":"%{http_user_agent}","http_x_forwarded_for":"%{http_x_forwarded_for}"}'
    }
  }

  # Optionnel : Nettoyage des valeurs vides
  mutate {
    remove_field => ["message"]
    # Si http_x_forwarded_for est vide, le définir comme nul ou comme chaîne vide
    convert => { "http_x_forwarded_for" => "string" }
    gsub => ["http_x_forwarded_for", "^}$", ""]
  }

  ruby {
    code => "
      event.to_hash.keys.each { |k|
        if k.end_with?('.keyword')
          event.remove(k)
        end
      }
    "
  }
}

output {
 elasticsearch {
   index => "nginx"
   hosts=> "${ELASTIC_HOSTS}"
   user=> "${ELASTIC_USER}"
   password=> "${ELASTIC_PASSWORD}"
   cacert=> "certs/ca/ca.crt"
 }
}
